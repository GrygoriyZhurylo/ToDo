{"version":3,"sources":["Components/ToDoList.js","Components/CreateForm.js","App.js","serviceWorker.js","index.js"],"names":["ToDolist","props","useState","taskEdit","setTaskEdit","onEditTaskChange","e","name","target","value","taskSave","onSaveTask","className","todos","map","el","key","id","done","type","onChange","onClick","disabled","trim","onDeleteTask","onDoneTaskToggle","CreateForm","task","setTask","onCreateTask","App","setTodos","updatedTodos","push","Math","random","length","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2df3fde6.chunk.js","sourcesContent":["import React, {useState} from 'react';\n\n\nfunction ToDolist(props) {\n    const [taskEdit, setTaskEdit] = useState({});\n    const editMode = (task) => {\n        setTaskEdit(task);\n    };\n    const onEditTaskChange = (e) => {\n        setTaskEdit({...taskEdit, name: e.target.value});\n    };\n    const taskSave = () => {\n        props.onSaveTask(taskEdit);\n        setTaskEdit({});\n    };\n    return (\n        <div className=\"App\">\n            {\n                props.todos.map(el =>\n                    <li key={el.id}>\n                        {el.done ? '✅' : '❌'}\n                        {\n                            taskEdit.id === el.id\n                                ? <>\n                                    <input type=\"text\" value={taskEdit.name} onChange={onEditTaskChange}/>\n                                    <button onClick={taskSave} disabled={taskEdit.name.trim() === ''}>Save</button>\n                                </>\n                                : <span onClick={()=> editMode(el)}>{el.name}</span>\n                            }\n                            <button onClick={() => props.onDeleteTask(el.id)}>Delete</button>\n                            <button onClick={() => props.onDoneTaskToggle(el.id)}>{el.done ? 'Undone' : 'Done'}</button>\n                            </li>\n                            )\n                            }\n                            </div>\n                            );\n                            }\n\n                            export default ToDolist;\n","import React, {useState} from 'react';\n\nfunction CreateForm(props) {\n    const [task, setTask] = useState('')\n    const addTask = () => {\n        props.onCreateTask(task);\n        setTask('')\n    }\n    return (\n        <div className=\"App\">\n            <input type=\"text\" value={task} onChange={(e) => setTask(e.target.value)}/>\n            <button onClick={addTask} disabled={task.trim() === ''}>Add</button>\n        </div>\n    );\n}\n\nexport default CreateForm;\n","import React, {useState} from 'react';\n\nimport './App.css';\nimport ToDolist from \"./Components/ToDoList\";\nimport CreateForm from \"./Components/CreateForm\";\n\n\nfunction App() {\n    const initialState = [\n        {\n            id: 1, name: 'Get up', done: true,\n        }, {\n            id: 2, name: 'Call the wife', done: false,\n        }, {\n            id: 3, name: 'Take exercises', done: true,\n        },];\n\n    const [todos, setTodos] = useState(initialState)\n    const onCreateTask = (task) => {\n        const updatedTodos = [...todos];\n        updatedTodos.push({id: Math.random(), name: task, done: false,});\n        setTodos(updatedTodos);\n    };\n    const onDeleteTask = (id) => {\n        const updatedTodos = todos.filter(el => el.id !== id);\n        setTodos(updatedTodos);\n    }\n    const onDoneTaskToggle = (id) => {\n        const updatedTodos = todos.map(el => {\n            return el.id === id ? {...el, done: !el.done} : el\n        });\n        setTodos(updatedTodos)\n    };\n    const onSaveTask = (task) => {\n        const updatedTodos = todos.map(el => {\n            return el.id === task.id ? {...el, name: task.name}\n                : el;\n        });\n        setTodos(updatedTodos)\n    }\n    return (\n        <div className=\"App\">\n            <h1>To do List</h1>\n            <CreateForm onCreateTask={onCreateTask}/>\n            <hr/>\n            <h2>Total:{todos.length}</h2>\n            <h3>Done: {todos.filter(el => el.done).length}</h3>\n            <h3>Undone: {todos.filter(el => !el.done).length}</h3>\n            <ToDolist todos={todos} onDeleteTask={onDeleteTask} onDoneTaskToggle={onDoneTaskToggle}\n                      onSaveTask={onSaveTask}/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}